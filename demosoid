// SPDX-License-Identifier: MIT
pragma solidity >=0.6.0 <0.8.0;
/**
 * @dev Interface of the ERC20 standard as defined in the EIP.Интерфейс стандарта ERC20, как определено в EIP.
 */
 interface IERC20 {
/**
     * @dev Returns the amount of tokens in existence.Возвращает количество существующих токенов.
     */
    function totalSupply() external view returns (uint256);
        /**
     * @dev Returns the amount of tokens owned by `account`.Возвращает количество токенов, принадлежащих `account`.
     */
    function balanceOf(address account) external view returns (uint256);
    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     * @dev Перемещает токены «amount» из учетной записи вызывающего абонента в «получатель».
     *
     * Возвращает логическое значение, указывающее, успешно ли выполнена операция.
     *
     * Выдает событие {Transfer}.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);
    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     * @dev Возвращает оставшееся количество токенов, которые `spender` будет
     * разрешено тратить от имени `владельца` через {transferFrom}. Это
     * по умолчанию ноль.
     *
     * Это значение изменяется при вызове {Approve} или {transferFrom}.
     */
    function allowance(address owner, address spender) external view returns (uint256);
    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     * @dev Устанавливает `amount` в качестве допуска` spender` к токенам вызывающего абонента.
     *
     * Возвращает логическое значение, указывающее, успешно ли выполнена операция.
     *
     * ВАЖНО: помните, что изменение пособия с помощью этого метода сопряжено с риском.
     * что кто-то может использовать как старое, так и новое пособие по несчастному случаю
     * заказ транзакции. Одно из возможных решений для смягчения этой гонки
     * условием является сначала уменьшить размер пособия спонсора до 0 и установить
     * желаемое значение потом:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Выдает событие {Approval}.
     */
    function approve(address spender, uint256 amount) external returns (bool);
    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     * @dev Перемещает токены «amount» от «отправителя» к «получателю» с помощью
     * механизм надбавки. "сумма" затем вычитается из суммы вызывающего абонента.
     * разрешение.
     *
     * Возвращает логическое значение, указывающее, успешно ли выполнена операция.
     *
     * Выдает событие {Transfer}.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     * @dev Генерируется, когда токены `value` перемещаются из одной учетной записи (` from`) в
     * другой (`to`).
     *
     * Обратите внимание, что значение может быть нулевым.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     * @dev Генерируется, когда размер «спонсора» для «владельца» устанавливается
     * звонок для одобрения. "value" - это новая надбавка.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}
